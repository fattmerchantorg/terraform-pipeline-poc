name: terraform-plan
on:
  pull_request:
    branches: [main]
env:
  TERRAFORM_VERSION: "1.1.9"
  #TFLINT_VERSION:
## TODO: Make validations/plan/apply reusable. Make it available from a != repo
## Ref: https://docs.github.com/en/actions/using-workflows/reusing-workflows
jobs:
  # tfsec:
  #   name: tfsec
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - name: setup terraform
  #       uses: hashicorp/setup-terraform@v1
  #       with:
  #         terraform_version: ${{ env.TERRAFORM_VERSION }}
  #         cli_config_credentials_token: ${{ secrets.TF_CLOUD_TOKEN }}
  #     - name: terraform init
  #       run: terraform init -backend=false
  #     - name: give temporary permissions
  #       run: sudo chown -R root:root $GITHUB_WORKSPACE
  #     - name: tfsec
  #       uses: reviewdog/action-tfsec@v1.15.0
  #       with:
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         fail_on_error: true
  #         filter_mode: file
  #         tfsec_flags: "--exclude-downloaded-modules"
  #         level: warning
  tflint:
    name: tflint
    runs-on: ubuntu-20.04
    steps:
      - name: checkout code
        uses: actions/checkout@v2
      - name: setup terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      - name: terraform init
        run: terraform init -backend=false
      - name: give temporary permissions
        run: sudo chown -R root:root $GITHUB_WORKSPACE
      - name: tflint
        uses: reviewdog/action-tflint@v1.10.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          fail_on_error: true
          filter_mode: file
          tflint_version: ${{ env.TFLINT_VERSION }}
          level: warning
  terraform-validate:
    name: terraform validate
    runs-on: ubuntu-20.04
    steps:
      - name: checkout code
        uses: actions/checkout@v2
      - name: setup terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      - name: terraform init
        run: terraform init -backend=false
      - name: terraform validate
        run: terraform validate
  misspell:
    name: misspell
    runs-on: ubuntu-20.04
    steps:
      - name: checkout code
        uses: actions/checkout@v2
      - name: give temporary permissions
        run: sudo chown -R root:root $GITHUB_WORKSPACE
      - name: misspell
        uses: reviewdog/action-misspell@v1.7.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          locale: "US"
          level: warning
          filter_mode: file
  fmt:
    name: terraform fmt
    runs-on: ubuntu-20.04
    steps:
      - name: checkout code
        uses: actions/checkout@v2
      - name: setup terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          cli_config_credentials_token: ${{ secrets.TF_CLOUD_TOKEN }}
      - name: terraform format
        run: terraform fmt -recursive -check -diff
  checkov:
    name: checkov
    runs-on: ubuntu-20.04
    steps:
      - name: checkout code
        uses: actions/checkout@v2
      - name: setup terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          cli_config_credentials_token: ${{ secrets.TF_CLOUD_TOKEN }}
      - name: checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: .
          quiet: true
  plan-sandbox:
    if: ${{ !startsWith(github.event.pull_request.head.ref , 'new') }}
    needs: [fmt, terraform-validate, misspell]
    name: "plan-sandbox"
    runs-on: ubuntu-20.04
    env:
      TF_WORKSPACE: "terraform-pipeline-poc-sandbox-us-west-2"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_CLOUD_TOKEN }}
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      - name: Terraform Init
        id: init
        run: TF_LOG=info terraform init
      - name: Terraform validate
        run: terraform validate
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true
      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `\`${{env.TF_WORKSPACE}}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>

            \`\`\`
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
  plan-qa:
    if: ${{ !startsWith(github.event.pull_request.head.ref , 'new') }}
    needs: [fmt, terraform-validate, misspell]
    name: "plan-qa"
    runs-on: ubuntu-20.04
    env:
      TF_WORKSPACE: "terraform-pipeline-poc-qa-us-west-2"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_CLOUD_TOKEN }}
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      - name: Terraform Init
        id: init
        run: TF_LOG=info terraform init
      - name: Terraform validate
        run: terraform validate
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true
      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `\`${{env.TF_WORKSPACE}}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>

            \`\`\`
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
  plan-dev:
    if: ${{ !startsWith(github.event.pull_request.head.ref , 'new') }}
    needs: [fmt, terraform-validate, misspell]
    name: "plan-dev"
    runs-on: ubuntu-20.04
    env:
      TF_WORKSPACE: "terraform-pipeline-poc-dev-us-west-2"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_CLOUD_TOKEN }}
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      - name: Terraform Init
        id: init
        run: TF_LOG=info terraform init
      - name: Terraform validate
        run: terraform validate
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true
      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `\`${{env.TF_WORKSPACE}}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>

            \`\`\`
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
  plan-prod:
    if: ${{ !startsWith(github.event.pull_request.head.ref , 'new') }}
    needs: [fmt, terraform-validate, misspell]
    name: "plan-prod"
    runs-on: ubuntu-20.04
    env:
      TF_WORKSPACE: "terraform-pipeline-poc-prod-us-west-2"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_CLOUD_TOKEN }}
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      - name: Terraform Init
        id: init
        run: TF_LOG=info terraform init
      - name: Terraform validate
        run: terraform validate
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true
      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `\`${{env.TF_WORKSPACE}}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>

            \`\`\`
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  plan-prod-hotfix:
    if: ${{ startsWith(github.event.pull_request.head.ref , 'new') }}
    needs: [fmt, terraform-validate, misspell]
    name: "plan-prod-hotfix"
    runs-on: ubuntu-20.04
    env:
      TF_WORKSPACE: "terraform-pipeline-poc-prod-us-west-2"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_CLOUD_TOKEN }}
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      - name: Terraform Init
        id: init
        run: TF_LOG=info terraform init
      - name: Terraform validate
        run: terraform validate
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true
      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `\`${{env.TF_WORKSPACE}}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>

            \`\`\`
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  apply-prod-hotfix:
    if: ${{ startsWith(github.event.pull_request.head.ref , 'new') && github.event.action == 'closed' && github.event.pull_request.merged == true  }}
    needs: [fmt, terraform-validate, misspell, plan-prod-hotfix]
    name: "apply-prod-hotfix"
    runs-on: ubuntu-20.04
    env:
      TF_WORKSPACE: "terraform-pipeline-poc-prod-us-west-2"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_CLOUD_TOKEN }}
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      - name: Terraform Init
        id: init
        run: TF_LOG=info terraform init
      - name: Terraform Apply
        id: apply
        run: terraform apply
