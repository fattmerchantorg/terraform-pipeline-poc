# name: terraform
# on: pull_request
# env:
#   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#   TERRAFORM_VERSION: "0.12.31"
#   TFLINT_VERSION: "v0.28.0"
#   AWS_DEFAULT_REGION: "us-east-1"
#   TF_WORKSPACE: "stage"

# jobs:
#   fmt:
#     name: terraform fmt
#     runs-on: ubuntu-20.04
#     steps:
#       - name: checkout code
#         uses: actions/checkout@v2.3.4
#       - name: setup terraform
#         uses: hashicorp/setup-terraform@v1.3.2
#         with:
#           terraform_version: ${{ env.TERRAFORM_VERSION }}
#           cli_config_credentials_token: ${{ secrets.TF_TOKEN }}
#       - name: terraform format
#         run: terraform fmt -recursive -check -diff
#   terraform-validate:
#     name: terraform validate
#     runs-on: ubuntu-20.04
#     steps:
#       - name: checkout code
#         uses: actions/checkout@v2.3.4
#       - name: setup terraform
#         uses: hashicorp/setup-terraform@v1.3.2
#         with:
#           terraform_version: ${{ env.TERRAFORM_VERSION }}
#           cli_config_credentials_token: ${{ secrets.TF_TOKEN }}
#       - name: terraform init
#         run: terraform init
#       - name: terraform validate
#         run: terraform validate
#   tflint:
#     name: tflint
#     runs-on: ubuntu-20.04
#     steps:
#       - name: checkout code
#         uses: actions/checkout@v2.3.4
#       - name: setup terraform
#         uses: hashicorp/setup-terraform@v1.3.2
#         with:
#           terraform_version: ${{ env.TERRAFORM_VERSION }}
#           cli_config_credentials_token: ${{ secrets.TF_TOKEN }}

#       - name: terraform init
#         run: terraform init
#       - name: tflint
#         uses: reviewdog/action-tflint@v1.10.0
#         with:
#           github_token: ${{ secrets.GITHUB_TOKEN }}
#           fail_on_error: true
#           filter_mode: file
#           tflint_version: ${{ env.TFLINT_VERSION }}
#           level: warning
#   tfsec:
#     name: tfsec
#     runs-on: ubuntu-20.04
#     steps:
#       - name: checkout code
#         uses: actions/checkout@v2.3.4
#       - name: checkout custom checks
#         uses: actions/checkout@v2.3.4
#         with:
#           repository: boost-insurance/terraform-tfsec-custom-checks
#           token: ${{ secrets.GH_BOOSTDROID_PAT }}
#           path: custom-checks
#       - name: setup terraform
#         uses: hashicorp/setup-terraform@v1.3.2
#         with:
#           terraform_version: ${{ env.TERRAFORM_VERSION }}
#           cli_config_credentials_token: ${{ secrets.TF_TOKEN }}
#       - name: terraform init
#         run: terraform init
#       - name: tfsec
#         uses: reviewdog/action-tfsec@v1.7.0
#         with:
#           github_token: ${{ secrets.GITHUB_TOKEN }}
#           fail_on_error: true
#           filter_mode: file
#           tfsec_flags: "--exclude-downloaded-modules --custom-check-dir=custom-checks"
#           level: warning
#   checkov:
#     name: checkov
#     runs-on: ubuntu-20.04
#     steps:
#       - name: checkout code
#         uses: actions/checkout@v2.3.4
#       - name: setup terraform
#         uses: hashicorp/setup-terraform@v1.3.2
#         with:
#           terraform_version: ${{ env.TERRAFORM_VERSION }}
#           cli_config_credentials_token: ${{ secrets.TF_TOKEN }}
#       - name: checkov
#         uses: bridgecrewio/checkov-action@v12
#         with:
#           directory: .
#           quiet: true
#           framework: terraform
#   misspell:
#     name: misspell
#     runs-on: ubuntu-20.04
#     steps:
#       - name: checkout code
#         uses: actions/checkout@v2.3.4
#       - name: misspell
#         uses: reviewdog/action-misspell@v1.7.1
#         with:
#           github_token: ${{ secrets.GITHUB_TOKEN }}
#           locale: "US"
#           level: warning
#           filter_mode: file

on:
  pull_request:
    branches: [main]

jobs:
  plan-dev:
    name: "plan-dev"
    runs-on: ubuntu-latest
    env:
      TF_WORKSPACE: "terraform-pipeline-poc-dev-us-west-2"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_CLOUD_TOKEN }}
      - name: Terraform Init
        id: init
        run: TF_LOG=info terraform init
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true
      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `\`${{env.TF_WORKSPACE}}\`
            #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>

            \`\`\` 
            ${process.env.PLAN} 
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  plan-prod:
    name: "plan-prod"
    runs-on: ubuntu-latest
    env:
      TF_WORKSPACE: "terraform-pipeline-poc-prod-us-west-2"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_CLOUD_TOKEN }}
      - name: Terraform Init
        id: init
        run: TF_LOG=info terraform init
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true
      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `\`${{env.TF_WORKSPACE}}\`
            #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>

            \`\`\` 
            ${process.env.PLAN} 
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
